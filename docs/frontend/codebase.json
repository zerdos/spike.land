{
    "files": [
      {
        "name": "eslint.config.mts",
        "type": "configuration",
        "description": "ESLint configuration file for a TypeScript and React project. It defines rules and plugins for code linting, extending recommended configurations and customizing rules for React, TypeScript, and code style.",
        "exports": {
          "default": "ESLint configuration object"
        },
        "important_aspects": [
          "Ignores specific directories and files (dist, dts, node_modules, d.ts, config files).",
          "Extends recommended and stylistic configurations from ESLint and typescript-eslint.",
          "Configures language options for ECMAScript 2025, module source type, and browser/node globals.",
          "Uses typescript-eslint parser with project settings.",
          "Includes plugins for React Hooks, React Refresh, and typescript-eslint.",
          "Custom rules to handle console statements, React Refresh, unused variables, type definitions (interfaces), array types, empty functions, inferrable types, React hooks, and React-specific rules (JSX keys, unescaped entities, prop types, display name)."
        ]
      },
      {
        "name": "index.html",
        "type": "markup",
        "description": "Main HTML file for a web application. Sets up the basic structure, meta information, fonts, and module import map for a React application.",
        "exports": {
          "none": "HTML file, no JavaScript exports"
        },
        "important_aspects": [
          "Defines base URL, character set, viewport, and title.",
          "Includes favicon and preloads/links Roboto Flex font from Google Fonts.",
          "Defines an import map to alias module paths (e.g., '@/') and map specific library modules (React, Emotion, Framer Motion) to local paths, likely for optimized loading or development setup.",
          "Contains a div with id 'embed' as a mounting point for the React application.",
          "Loads the main application entry point from 'src/start.ts' as a module."
        ]
      },
      {
        "name": "package-ast.json",
        "type": "package_manifest",
        "description": "package.json file for a Node.js package named 'ast-code-modification'. Defines metadata, scripts, dependencies, and devDependencies for a tool focused on AST-based code modification, likely for AI agents.",
        "exports": {
          "none": "JSON file, no JavaScript exports"
        },
        "important_aspects": [
          "Package name: 'ast-code-modification'",
          "Description: 'AST-based code modification tool for AI agents'",
          "Main entry point: 'index.js'",
          "Scripts: 'build' (tsc), 'test' (jest)",
          "Dependencies: @babel/core, generator, parser, traverse, types, @langchain/anthropic, core, langgraph, prettier, uuid, zod - Core libraries for AST manipulation, Langchain integration, code formatting, and utilities.",
          "DevDependencies: Types for babel, jest, node, prettier, uuid, jest, ts-jest, typescript - Development tools and type definitions for testing and TypeScript compilation."
        ]
      },
      {
        "name": "package.json",
        "type": "package_manifest",
        "description": "package.json file for a web/Node.js package named '@spike-npm-land/code'. Defines metadata, scripts for development, building, testing, and a wide range of dependencies for a complex React application named 'spike.land'.",
        "exports": {
          "none": "JSON file, no JavaScript exports"
        },
        "important_aspects": [
          "Package name: '@spike-npm-land/code'",
          "Version: '0.9.56', Type: 'module'",
          "Description: 'spike.land'",
          "Entry point: 'dist/modules.mjs', Source: 'src/modules.ts', Types: 'dts/src/modules.d.ts'",
          "Scripts: Comprehensive set for development (dev, dev:vite, dev:workers), building (build, build:all, build:vite, build:workers, build:types, post-build, remove-extraneous), type checking (types:check, types:build, types:watch, types:cp), testing (test, test:full), and utilities (clean, lint, fmt, preview).",
          "Dependencies: Extensive list including @anthropic-ai/sdk, @babel/*, @clerk/*, @emotion/*, @github/stable-socket, @heroicons/react, @hookform/resolvers, @langchain/*, @mui/material, @okikio/sharedworker, @radix-ui/*, @react-spring/*, @tabler/icons-react, @tailwindcss/*, @tanstack/react-router, @tanstack/react-virtual, @tanstack/router-plugin, numerous utility and UI libraries, Monaco Editor, Prettier, React, React DOM, and more - Indicates a feature-rich React application with AI capabilities, UI components, and Monaco editor integration.",
          "DevDependencies: Development and testing tools like @cloudflare/workers-types, @emotion/babel-plugin, @eslint/*, @rollup/plugin-html, @testing-library/*, @types/*, @vitejs/plugin-react-swc, @vitest/*, ai-digest, autoprefixer, concurrently, crypto-browserify, esbuild, happy-dom, jest, jsdom, postcss, rimraf, rollup-plugin-visualizer, tailwindcss, typescript, vite, vitest - Comprehensive suite of tools for development, testing, and build processes."
        ]
      },
      {
        "name": "postcss.config.cjs",
        "type": "configuration",
        "description": "PostCSS configuration file in CommonJS format. Configures PostCSS plugins for handling CSS imports, Tailwind CSS directives, and automatic vendor prefixing using Autoprefixer.",
        "exports": {
          "module.exports": "PostCSS configuration object"
        },
        "important_aspects": [
          "Defines PostCSS plugins to be used.",
          "Includes 'postcss-import' for resolving and inlining CSS `@import` rules.",
          "Includes '@tailwindcss/postcss' for processing Tailwind CSS directives.",
          "Includes 'autoprefixer' for adding vendor prefixes to CSS rules for browser compatibility."
        ]
      },
      {
        "name": "scripts/run-tests.sh",
        "type": "script",
        "description": "Shell script to run tests using Vitest. It enhances the test execution by buffering output, filtering error messages to remove noise from yarn/node_modules paths, and limiting the error output length.",
        "exports": {
          "none": "Shell script, no exports"
        },
        "important_aspects": [
          "Shell script for running Vitest tests.",
          "Buffers standard output and standard error to temporary files.",
          "Filters standard error output to remove lines containing '.yarn' or 'node_modules' to reduce noise.",
          "Limits filtered error output to a maximum of 500 lines using `head -n 500`.",
          "Outputs filtered error messages only if tests fail.",
          "On test success, outputs the buffered standard output.",
          "Cleans up temporary files after execution.",
          "Uses `vitest --no-color --reporter dot run` to execute tests with specific reporters and flags."
        ]
      },
      {
        "name": "src/App.tsx",
        "type": "component",
        "description": "Main React application component. Serves as the root component and renders the AppRouter, which is likely responsible for handling application routing.",
        "exports": {
          "App": "React functional component (default export)"
        },
        "important_aspects": [
          "Functional React component named 'App'.",
          "Imports and renders 'AppRouter' component from './routes/router'.",
          "Acts as the top-level component in the React application structure.",
          "Responsible for initiating the application's routing and UI rendering."
        ]
      },
      {
        "name": "src/ast-code-workflow-example.ts",
        "type": "example",
        "description": "Example TypeScript file demonstrating an AST-based code modification workflow using Langchain. Shows how to create, setup, and run an AST workflow for AI-driven code changes with error handling and integrity checks.",
        "exports": {
          "setupAndRunAst": "Asynchronous function to setup and run the AST workflow example"
        },
        "important_aspects": [
          "Defines a custom error class 'ExampleError' for workflow-specific error handling.",
          "Includes 'example' function that demonstrates the core AST workflow:",
          "  - Fetches code session and code space.",
          "  - Calculates MD5 hash for code integrity verification.",
          "  - Creates an AST workflow using 'createAstWorkflow' worker.",
          "  - Invokes the workflow with a user request and file path.",
          "  - Verifies code integrity after modification using document hashes.",
          "  - Logs workflow results and broadcasts them via BroadcastChannel.",
          "  - Includes enhanced error handling for 'ExampleError' and unexpected errors.",
          "Defines 'setupAndRunAst' function to setup resources (BroadcastChannel) and call the 'example' function, ensuring channel closure in the 'finally' block.",
          "Illustrates the use of AST-based workflows for automated code modification with integrity and error management."
        ]
      },
      {
        "name": "src/AsyncStorage.ts",
        "type": "module",
        "description": "TypeScript module providing an asynchronous local storage API, wrapping the 'window-async-local-storage' library. It re-exports functions from the library and provides an 'AsyncLocalStorage' class that mimics the Node.js 'asyncLocalStorage' API.",
        "exports": {
          "named": [
            "clear",
            "getAllkeys",
            "getItem",
            "mergeItem",
            "multiGet",
            "multiMerge",
            "multiRemove",
            "multiSet",
            "removeItem",
            "setItem"
          ],
          "default": "AsyncLocalStorage class"
        },
        "important_aspects": [
          "Re-exports functions from 'window-async-local-storage' for direct usage.",
          "Defines 'AsyncLocalStorage' class to manage asynchronous local storage:",
          "  - Contains methods 'getItem', 'setItem', 'removeItem', 'clear' directly from the wrapped library.",
          "  - Includes 'getStore' method to retrieve the current store as a Record<string, unknown>.",
          "  - Implements 'run' method to execute a callback within a specific storage context, mimicking Node.js 'asyncLocalStorage.run'.",
          "  - Provides 'getStoreSync' method to synchronously access the current store, similar to Node.js 'asyncLocalStorage.getStore()'.",
          "Provides an API similar to Node.js 'asyncLocalStorage' but for browser environments using 'window-async-local-storage'."
        ]
      },
      {
        "name": "src/cf-esbuild.mjs",
        "type": "module",
        "description": "JavaScript module (MJS) that re-exports the 'esbuild' module from a relative local path '../../js.spike.land/src/index'. Likely used for consistent module resolution within the project, especially in cloudflare or worker environments.",
        "exports": {
          "default": "Re-exported 'esbuild' module"
        },
        "important_aspects": [
          "Simple module that re-exports 'esbuild'.",
          "Module format is MJS (JavaScript Module).",
          "Points to a local 'esbuild' build, possibly for development or custom builds.",
          "Acts as a centralized point to import 'esbuild' within the project, ensuring consistent version and path."
        ]
      },
      {
        "name": "src/chat-utils-langchain-example.ts",
        "type": "example",
        "description": "Example TypeScript file demonstrating a chat-based code modification workflow using Langchain and string replacement. Focuses on setting up and running a workflow that uses string replacement for code modifications, with error handling and integrity checks.",
        "exports": {
          "setupAndRun": "Asynchronous function to setup and run the chat-based workflow example"
        },
        "important_aspects": [
          "Defines 'CodeModWorkflowError' class for custom error handling in the workflow.",
          "Includes 'setupAndRun' function to initiate and manage the workflow setup and execution.",
          "Contains 'example' function that implements the core chat-based workflow:",
          "  - Dynamically imports 'createWorkflowWithStringReplace' worker.",
          "  - Fetches code session and code space.",
          "  - Calculates MD5 hash for initial code integrity.",
          "  - Creates a workflow using 'createWorkflowWithStringReplace' worker, passing initial code, code space, origin, and options (like 'returnModifiedCode').",
          "  - Invokes the workflow with a user prompt.",
          "  - Verifies workflow execution success and code integrity using document hashes.",
          "  - Logs workflow results and broadcasts them via BroadcastChannel.",
          "  - Implements error handling for 'CodeModWorkflowError' and unexpected errors.",
          "Demonstrates a workflow using string replacement for code modification, suitable for simpler code changes compared to AST-based approaches."
        ]
      },
      {
        "name": "src/ChatInterface.tsx",
        "type": "component",
        "description": "React functional component 'ChatInterface' for the main chat interface of the application. Manages chat sessions, messages, user input, and integrates features like dark mode, dictation, and screenshot capabilities.",
        "exports": {
          "ChatInterface": "React functional component (memoized, default export)"
        },
        "important_aspects": [
          "Memoized React functional component 'ChatInterface'.",
          "Uses 'ChatDrawer' component for UI structure.",
          "Manages chat session state using 'useState' and 'useEffect' to fetch and update session data and messages.",
          "Integrates 'useDarkMode' hook for dark mode toggle.",
          "Integrates 'useDictation' hook for voice input.",
          "Integrates 'useScreenshot' hook for screenshot functionality.",
          "Uses 'useLocalStorage' to persist 'isStreaming' state.",
          "Handles message streaming state with timeouts and BroadcastChannel communication.",
          "Implements message editing functionality, including 'handleCancelEdit' and 'handleSaveEdit'.",
          "Includes 'resetChat' callback to clear messages and input.",
          "Listens to BroadcastChannel ('${codeSpace}-chat') for real-time updates on messages, streaming status, debug info, and code changes.",
          "Handles scrolling to the latest message on chat open.",
          "Manages user input via 'useDictation' and manual input, sending messages using 'handleSendMessage'."
        ]
      }
    ]
  }