name: Update DockerHub Images

on:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:

permissions:
  contents: read
  id-token: write
  packages: write

env:
  BUILDKIT_PROGRESS: plain
  DOCKER_BUILDKIT: 1

jobs:
  prepare-metadata:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      date: ${{ steps.date.outputs.date }}
    steps:
      - uses: actions/checkout@v4
      
      - id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - id: set-matrix
        run: |
          echo "matrix=$(echo '{
            "image-name": ["rolling-devcontainer", "bookworm-devcontainer", "trixie-devcontainer"],
            "platform": ["linux/amd64", "linux/arm64"]
          }')" >> $GITHUB_OUTPUT

  build-and-push:
    needs: prepare-metadata
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-metadata.outputs.matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ matrix.image-name }}-${{ matrix.platform }}-${{ needs.prepare-metadata.outputs.date }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ matrix.image-name }}-${{ matrix.platform }}-${{ needs.prepare-metadata.outputs.date }}-
            ${{ runner.os }}-buildx-${{ matrix.image-name }}-${{ matrix.platform }}-
            ${{ runner.os }}-buildx-${{ matrix.image-name }}-

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug
          driver-opts: |
            image=moby/buildkit:latest
            network=host

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: devimages/${{ matrix.image-name }}
          tags: |
            type=raw,value=latest
            type=ref,event=tag
            type=sha,format=short

      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@v1.3.0
        with:
          path: devcontainers/${{ matrix.image-name }}

      - name: Generate cache keys
        id: cache-keys
        run: |
          echo "CACHE_FROM=type=local,src=/tmp/.buildx-cache,type=registry,ref=devimages/${{ matrix.image-name }}:buildcache-${{ matrix.platform }},type=registry,ref=devimages/${{ matrix.image-name }}:latest" >> $GITHUB_ENV
          echo "CACHE_TO=type=local,dest=/tmp/.buildx-cache-new,type=registry,ref=devimages/${{ matrix.image-name }}:buildcache-${{ matrix.platform }},mode=max" >> $GITHUB_ENV

      - name: Calculate layer cache hash
        id: layer-cache-hash
        run: |
          DOCKERFILE_HASH=$(sha256sum ./devcontainers/${{ matrix.image-name }}/Dockerfile | cut -d ' ' -f 1)
          echo "hash=${DOCKERFILE_HASH}" >> $GITHUB_OUTPUT

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./devcontainers/${{ matrix.image-name }}/Dockerfile
          push: true
          platforms: ${{ matrix.platform }}
          tags: |
            devimages/${{ matrix.image-name }}:${{ steps.extract_version.outputs.version }}
            devimages/${{ matrix.image-name }}:latest
            devimages/${{ matrix.image-name }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            ${{ env.CACHE_FROM }}
          cache-to: ${{ env.CACHE_TO }}
          pull: true
          no-cache-filters: |
            */dist-upgrade
          build-args: |
            BUILDKIT_INLINE_CACHE=1
            BUILDKIT_CONTEXT_KEEP_GIT_DIR=1
            CACHE_DATE=${{ needs.prepare-metadata.outputs.date }}
            GIT_COMMIT=${{ github.sha }}
          outputs: |
            type=image,name=devimages/${{ matrix.image-name }},push-by-digest=true,name-canonical=true,push=true
          provenance: mode=max
          sbom: true
          # Add BuildKit cache mounting for package managers
          allow: |
            network.host
          secrets: |
            GIT_AUTH_TOKEN=${{ github.token }}

      # Move cache to avoid growing it indefinitely
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Prune old images to keep registry clean
      - name: Prune old images
        if: github.ref == 'refs/heads/main'
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d '{"username": "'${{ secrets.DOCKERHUB_USERNAME }}'", "password": "'${{ secrets.DOCKERHUB_TOKEN }}'"}' https://hub.docker.com/v2/users/login/ | jq -r .token)
          
          # Get list of tags
          TAGS=$(curl -s -H "Authorization: JWT ${TOKEN}" "https://hub.docker.com/v2/repositories/devimages/${{ matrix.image-name }}/tags?page_size=100" | jq -r '.results[] | select(.name | startswith("sha-")) | .name')
          
          # Keep only the 10 most recent
          TAGS_TO_DELETE=$(echo "$TAGS" | sort -r | tail -n +11)
          
          # Delete old tags
          for TAG in $TAGS_TO_DELETE; do
            echo "Deleting tag: $TAG"
            curl -s -X DELETE -H "Authorization: JWT ${TOKEN}" "https://hub.docker.com/v2/repositories/devimages/${{ matrix.image-name }}/tags/${TAG}/"
          done

  combine-manifests:
    needs: [build-and-push, prepare-metadata]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image-name: ${{ fromJson(needs.prepare-metadata.outputs.matrix).image-name }}
    
    steps:
      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract version
        id: extract_version
        uses: Saionaro/extract-package-version@v1.3.0
        with:
          path: devcontainers/${{ matrix.image-name }}
          
      - name: Create and push multi-platform manifest
        run: |
          docker manifest create devimages/${{ matrix.image-name }}:${{ steps.extract_version.outputs.version }} \
            --amend devimages/${{ matrix.image-name }}:${{ steps.extract_version.outputs.version }}-linux-amd64 \
            --amend devimages/${{ matrix.image-name }}:${{ steps.extract_version.outputs.version }}-linux-arm64
          docker manifest push devimages/${{ matrix.image-name }}:${{ steps.extract_version.outputs.version }}
          
          docker manifest create devimages/${{ matrix.image-name }}:latest \
            --amend devimages/${{ matrix.image-name }}:${{ steps.extract_version.outputs.version }}-linux-amd64 \
            --amend devimages/${{ matrix.image-name }}:${{ steps.extract_version.outputs.version }}-linux-arm64
          docker manifest push devimages/${{ matrix.image-name }}:latest