version: "3.9"
services:
  # Update this to the name of the service you want to work with in your docker-compose.yml file
  devcontainer:
    # If you want add a non-root user to your Dockerfile, you can use the "remoteUser"
    # property in devcontainer.json to cause VS Code its sub-processes (terminals, tasks,
    # debugging) to execute as the user. Uncomment the next line if you want the entire
    # container to run as this user instead. Note that, on Linux, you may need to
    # ensure the UID and GID of the container user you create matches your local user.
    # See https://aka.ms/vscode-remote/containers/non-root for details.
    #
    # user: vscode

    # Uncomment if you want to override the service's Dockerfile to one in the .devcontainer
    # folder. Note that the path of the Dockerfile and context is relative to the *primary*
    # docker-compose.yml file (the first in the devcontainer.json "dockerComposeFile"
    # array). The sample below assumes your primary file is in the root of your project.
    #
    # build:
    #   context: .
    #   dockerfile: .devcontainer/Dockerfile
    volumes:
      - ../..:/home/z/workspace:cached
      - ${HOME:-/home/z}/.config:/home/z/.config:cached
      - ${HOME:-/home/z}/.vscode:/home/z/.vscode:cached
      - ${HOME:-/home/z}/.vscode-server:/home/z/.vscode-server:cached
      - ${HOME:-/home/z}/.cache:/home/z/.cache:cached
      - ${HOME:-/home/z}/.oh-my-zsh:/home/z/.oh-my-zsh:cached
    ports:
      - "3333:3333"
      - "6080:6080"
      - "9222:9222"
      - "8080:8080"
    ipc: host
    init: true
    tty: true
    stdin_open: true
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 3333 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 2G
