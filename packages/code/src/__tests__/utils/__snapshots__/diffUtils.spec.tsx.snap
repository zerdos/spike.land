// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`diffUtils > should do partial5 1`] = `
"<<<<<<< SEARCH
    <div className='w-full font-mono text-sm rounded-lg overflow-hidden shadow-lg bg-white'>
      <div className='bg-gray-200 px-4 py-2 flex items-center space-x-2'>
        <div className='w-3 h-3 rounded-full bg-red-500'></div>
        <div className='w-3 h-3 rounded-full bg-yellow-500'></div>
        <div className='w-3 h-3 rounded-full bg-green-500'></div>
      </div>
      <div className='bg-gray-100 text-gray-800 py-2 px-4 text-sm border-b border-gray-300 flex justify-between items-center'>
=======
    <div className='w-full font-mono text-sm rounded-lg overflow-hidden shadow-lg bg-gray-900'>
      <div className='bg-gray-800 text-gray-200 py-2 px-4 text-sm border-b border-gray-700 flex justify-between items-center'>
>>>>>>> REPLACE

<<<<<<< SEARCH
        style={{
          ...tomorrow,
          'pre[class*="language-"]': {
            ...tomorrow['pre[class*="language-"]'],
            background: "#f8f8f8",
            padding: "1rem",
          },
          'code[class*="language-"]': {
            ...tomorrow['code[class*="language-"]'],
            color: "#333",
          },
        }}
=======
        style={{
          ...tomorrow,
          'pre[class*="language-"]': {
            ...tomorrow['pre[class*="language-"]'],
            background: "#1a202c",
            padding: "1rem",
          },
          'code[class*="language-"]': {
            ...tomorrow['code[class*="language-"]'],
            color: "#e2e8f0",
          },
        }}
>>>>>>> REPLACE

<<<<<<< SEARCH
import { ClipboardIcon } from "@heroicons/react/24/outline";
=======
import { ClipboardIcon, DocumentDuplicateIcon, ClipboardDocumentIcon } from "@heroicons/react/24/outline";
>>>>>>> REPLACE

<<<<<<< SEARCH
  const [copied, setCopied] = useState(false);
=======
  const [copied, setCopied] = useState(false);
  const [iconIndex, setIconIndex] = useState(0);
  const icons = [ClipboardIcon, DocumentDuplicateIcon, ClipboardDocumentIcon];
  const Icon = icons[iconIndex];
>>>>>>> REPLACE

<<<<<<< SEARCH
        <div className='relative'>
          <button
            className='text-gray-600 hover:text-gray-800 ml-2 transition-colors duration-200'
            onClick={() => {
              navigator.clipboard.writeText(value);
              setCopied(true);
              setTimeout(() => setCopied(false), 2000);
            }}>
            <ClipboardIcon className='w-5 h-5' />
          </button>
          {copied && (
            <div className='absolute right-0 mt-2 py-1 px-2 bg-gray-800 text-white text-xs rounded shadow-lg'>
              Copied!
            </div>
          )}
        </div>
=======
        <div className='relative'>
          <button
            className='text-gray-300 hover:text-white ml-2 transition-colors duration-200'
            onClick={() => {
              navigator.clipboard.writeText(value);
              setCopied(true);
              setTimeout(() => setCopied(false), 2000);
              setIconIndex((iconIndex + 1) % icons.length);
            }}>
            <Icon className='w-5 h-5' />
          </button>
          {copied && (
            <div className='absolute right-0 mt-2 py-1 px-2 bg-gray-700 text-white text-xs rounded shadow-lg'>
              Copied!
            </div>
          )}
        </div>
>>>>>>> REPLACE

<<<<<<< SEARCH
<div className='w-full font-mono text-sm rounded-lg overflow-hidden shadow-lg bg-white'>
      <div className='bg-gray-200 px-4 py-2 flex items-center space-x-2'>
        <div className='w-3 h-3 rounded-full bg-red-500'></div>
        <div className='w-3 h-3 rounded-full bg-yellow-500'></div>
        <div className='w-3 h-3 rounded-full bg-green-500'></div>
      </div>
      <div className='bg-gray-100 text-gray-800 py-2 px-4 text-sm border-b border-gray-300 flex justify-between items-center'>
=======
<div className='w-full font-mono text-sm rounded-lg overflow-hidden shadow-lg bg-gray-900'>
      <div className='bg-gray-800 text-gray-200 py-2 px-4 text-sm border-b border-gray-700 flex justify-between items-center'>
>>>>>>> REPLACE

<<<<<<< SEARCH
style={{
          ...tomorrow,
          'pre[class*="language-"]': {
            ...tomorrow['pre[class*="language-"]'],
            background: "#f8f8f8",
            padding: "1rem",
          },
          'code[class*="language-"]': {
            ...tomorrow['code[class*="language-"]'],
            color: "#333",
          },
        }}
=======
style={{
          ...tomorrow,
          'pre[class*="language-"]': {
            ...tomorrow['pre[class*="language-"]'],
            background: "#1a202c",
            padding: "1rem",
          },
          'code[class*="language-"]': {
            ...tomorrow['code[class*="language-"]'],
            color: "#e2e8f0",
          },
        }}
>>>>>>> REPLACE

<<<<<<< SEARCH
import { ClipboardIcon } from "@heroicons/react/24/outline";
=======
import { ClipboardIcon, DocumentDuplicateIcon, ClipboardDocumentIcon } from "@heroicons/react/24/outline";
>>>>>>> REPLACE

<<<<<<< SEARCH
const [copied, setCopied] = useState(false);
=======
const [copied, setCopied] = useState(false);
  const [iconIndex, setIconIndex] = useState(0);
  const icons = [ClipboardIcon, DocumentDuplicateIcon, ClipboardDocumentIcon];
  const Icon = icons[iconIndex];
>>>>>>> REPLACE

<<<<<<< SEARCH
<div className='relative'>
          <button
            className='text-gray-600 hover:text-gray-800 ml-2 transition-colors duration-200'
            onClick={() => {
              navigator.clipboard.writeText(value);
              setCopied(true);
              setTimeout(() => setCopied(false), 2000);
            }}>
            <ClipboardIcon className='w-5 h-5' />
          </button>
          {copied && (
            <div className='absolute right-0 mt-2 py-1 px-2 bg-gray-800 text-white text-xs rounded shadow-lg'>
              Copied!
            </div>
          )}
        </div>
=======
<div className='relative'>
          <button
            className='text-gray-300 hover:text-white ml-2 transition-colors duration-200'
            onClick={() => {
              navigator.clipboard.writeText(value);
              setCopied(true);
              setTimeout(() => setCopied(false), 2000);
              setIconIndex((iconIndex + 1) % icons.length);
            }}>
            <Icon className='w-5 h-5' />
          </button>
          {copied && (
            <div className='absolute right-0 mt-2 py-1 px-2 bg-gray-700 text-white text-xs rounded shadow-lg'>
              Copied!
            </div>
          )}
        </div>
>>>>>>> REPLACE"
`;

exports[`diffUtils > should fix the fixable extractCodeModification 1`] = `
{
  "parts": [
    {
      "content": "Certainly! I'll remove the digital display from the SportWatchClock component. Here are the changes:

1. Remove the drawNumbers function:",
      "type": "text",
    },
    {
      "content": "<<<<<<< SEARCH
  const drawNumbers = (ctx: CanvasRenderingContext2D, radius: number) => {
    ctx.font = radius * 0.15 + "px Arial";
    ctx.textBaseline = "middle";
    ctx.textAlign = "center";
    ctx.fillStyle = "#ffffff";

    const numbers = [12, 3, 6, 9];
    numbers.forEach((num, index) => {
      const ang = (index * Math.PI) / 2;
      ctx.rotate(ang);
      ctx.translate(0, -radius * 0.75);
      ctx.rotate(-ang);
      ctx.fillText(num.toString(), 0, 0);
      ctx.rotate(ang);
      ctx.translate(0, radius * 0.75);
      ctx.rotate(-ang);
    });
  };
=======
  // Removed drawNumbers function
=======
>>>>>>> REPLACE
",
      "language": "diff",
      "type": "code",
    },
    {
      "content": "2. Remove the call to drawNumbers in the drawClock function:",
      "type": "text",
    },
    {
      "content": "<<<<<<< SEARCH
  const drawClock = () => {
    drawFace(ctx, radius);
    drawNumbers(ctx, radius);
    drawTime(ctx, radius);
  };
=======
  const drawClock = () => {
    drawFace(ctx, radius);
    drawTime(ctx, radius);
  };
>>>>>>> REPLACE
",
      "language": "diff",
      "type": "code",
    },
    {
      "content": "Explanation:
These changes remove the digital display (numbers) from the clock face. The clock will now only show the hour, minute, and second hands without any numbers on the face.

Improvements and alternatives:
1. To make the clock more readable without numbers, you could consider adding more prominent tick marks at the 12, 3, 6, and 9 o'clock positions. This can be done by modifying the drawFace function.

2. You could also add small dots or markers at each hour position to help users read the time more easily.

3. If you want to keep some indication of the clock positions without numbers, you could add small lines or triangles at the 12, 3, 6, and 9 o'clock positions.

Here's an example of how you could modify the drawFace function to add more prominent tick marks:",
      "type": "text",
    },
    {
      "content": "<<<<<<< SEARCH
    // Ticks
    for (let i = 0; i < 60; i++) {
      const ang = (i * Math.PI) / 30;
      ctx.beginPath();
      ctx.rotate(ang);
      ctx.moveTo(radius * 0.9, 0);
      ctx.lineTo(radius * 0.95, 0);
      ctx.strokeStyle = i % 5 === 0 ? "#ffffff" : "#808080";
      ctx.lineWidth = i % 5 === 0 ? 3 : 1;
      ctx.stroke();
      ctx.rotate(-ang);
    }
=======
    // Ticks
    for (let i = 0; i < 60; i++) {
      const ang = (i * Math.PI) / 30;
      ctx.beginPath();
      ctx.rotate(ang);
      ctx.moveTo(radius * 0.9, 0);
      ctx.lineTo(radius * 0.95, 0);
      if (i % 15 === 0) {
        // More prominent marks at 12, 3, 6, and 9
        ctx.strokeStyle = "#ffffff";
        ctx.lineWidth = 5;
      } else if (i % 5 === 0) {
        // Hour marks
        ctx.strokeStyle = "#ffffff";
        ctx.lineWidth = 3;
      } else {
        // Minute marks
        ctx.strokeStyle = "#808080";
        ctx.lineWidth = 1;
      }
      ctx.stroke();
      ctx.rotate(-ang);
    }
>>>>>>> REPLACE
",
      "language": "diff",
      "type": "code",
    },
    {
      "content": "These changes will create a more readable analog clock face without numbers, maintaining the sporty and minimalist design.",
      "type": "text",
    },
  ],
  "state": {
    "accumulatedContent": "",
    "accumulatedDiffContent": "",
    "isInCodeBlock": false,
    "isInDiffBlock": false,
  },
}
`;

exports[`diffUtils > should fix the fixable extractDiffContent 1`] = `
{
  "modified": "// Removed drawNumbers function",
  "original": "const drawNumbers = (ctx: CanvasRenderingContext2D, radius: number) => {
    ctx.font = radius * 0.15 + "px Arial";
    ctx.textBaseline = "middle";
    ctx.textAlign = "center";
    ctx.fillStyle = "#ffffff";

    const numbers = [12, 3, 6, 9];
    numbers.forEach((num, index) => {
      const ang = (index * Math.PI) / 2;
      ctx.rotate(ang);
      ctx.translate(0, -radius * 0.75);
      ctx.rotate(-ang);
      ctx.fillText(num.toString(), 0, 0);
      ctx.rotate(ang);
      ctx.translate(0, radius * 0.75);
      ctx.rotate(-ang);
    });
  };",
}
`;
